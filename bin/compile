#!/usr/bin/env bash
# Working LaTeX buildpack based on successful Heroku buildpacks
# Version: 2025.07.02-v2 (Updated with better error handling and TinyTeX v2025.07)

BUILD_DIR=$1
CACHE_DIR=$2
BIN_DIR=$(cd $(dirname $0); pwd)

# Use TinyTeX from GitHub releases (more reliable than install-tl)
TINYTEX_VERSION="v2025.07"
TINYTEX_URL="https://github.com/rstudio/tinytex-releases/releases/download/${TINYTEX_VERSION}/TinyTeX-1-${TINYTEX_VERSION}.tar.gz"
TEXLIVE_HOME="$BUILD_DIR/.texlive"
TEXLIVE_CACHE="$CACHE_DIR/.texlive"
PROFILE_D="$BUILD_DIR/.profile.d/texlive.sh"

echo "-----> Installing TinyTeX for CV generation"

# Create directories
mkdir -p "$TEXLIVE_HOME"
mkdir -p "$TEXLIVE_CACHE"
mkdir -p "$(dirname $PROFILE_D)"

# Enhanced caching with multiple validation checks
CACHE_SIGNATURE="$CACHE_DIR/.heroku-cache-signature"
PACKAGES_HASH=$(echo "$BUILD_DIR/latex-packages.txt" | md5sum | cut -d' ' -f1 2>/dev/null || echo "default")

# Create cache signature
CURRENT_SIGNATURE="${TINYTEX_VERSION}-${PACKAGES_HASH}-${STACK}"

# Check if we have a valid cached version
if [ -f "$TEXLIVE_CACHE/VERSION" ] && [ -f "$CACHE_SIGNATURE" ]; then
    CACHED_VERSION=$(cat "$TEXLIVE_CACHE/VERSION" 2>/dev/null || echo "")
    CACHED_SIGNATURE=$(cat "$CACHE_SIGNATURE" 2>/dev/null || echo "")
    
    if [ "$CACHED_VERSION" = "$TINYTEX_VERSION" ] && [ "$CACHED_SIGNATURE" = "$CURRENT_SIGNATURE" ]; then
        echo "-----> Installing TinyTeX $TINYTEX_VERSION from cache (validated)"
        cp -R "$TEXLIVE_CACHE"/* "$TEXLIVE_HOME/"
        CACHE_HIT=true
    else
        echo "-----> Cache invalidated (version: $CACHED_VERSION vs $TINYTEX_VERSION, signature: cached vs new)"
        CACHE_HIT=false
    fi
else
    echo "-----> No valid cache found"
    CACHE_HIT=false
fi

if [ "$CACHE_HIT" != "true" ]; then
    echo "-----> Downloading TinyTeX $TINYTEX_VERSION"
    echo "       URL: $TINYTEX_URL"
    
    # Download with better error handling and progress
    if curl -L "$TINYTEX_URL" -f --progress-bar -o /tmp/tinytex.tar.gz; then
        echo "       Download successful ($(ls -lh /tmp/tinytex.tar.gz | awk '{print $5}'))"
        
        # Verify it's a valid gzip file before extraction
        if file /tmp/tinytex.tar.gz | grep -q "gzip compressed"; then
            echo "       File verified as gzip, extracting..."
            if tar xzf /tmp/tinytex.tar.gz -C "$TEXLIVE_HOME" --strip-components=1; then
                echo "       Extraction successful"
            else
                echo "ERROR: Failed to extract TinyTeX"
                echo "       Archive contents:"
                tar tzf /tmp/tinytex.tar.gz | head -10
                exit 1
            fi
        else
            echo "ERROR: Downloaded file is not a valid gzip archive"
            echo "       File type: $(file /tmp/tinytex.tar.gz)"
            echo "       First few bytes: $(head -c 50 /tmp/tinytex.tar.gz | hexdump -C)"
            exit 1
        fi
        rm -f /tmp/tinytex.tar.gz
    else
        echo "ERROR: Failed to download TinyTeX from $TINYTEX_URL"
        echo "       curl exit code: $?"
        exit 1
    fi

    # Cache the installation
    rm -rf "$TEXLIVE_CACHE"/*
    cp -R "$TEXLIVE_HOME"/* "$TEXLIVE_CACHE/"
    echo "$TINYTEX_VERSION" > "$TEXLIVE_CACHE/VERSION"
    echo "$CURRENT_SIGNATURE" > "$CACHE_SIGNATURE"
fi

# Find TeX Live binaries
TEXLIVE_BIN_DIR=""
for bin_dir in "$TEXLIVE_HOME/.TinyTeX/bin/x86_64-linux" "$TEXLIVE_HOME/bin/x86_64-linux"; do
    if [ -d "$bin_dir" ] && [ -x "$bin_dir/pdflatex" ]; then
        TEXLIVE_BIN_DIR="$bin_dir"
        break
    fi
done

if [ -z "$TEXLIVE_BIN_DIR" ]; then
    echo "ERROR: Could not find TeX Live binaries"
    find "$TEXLIVE_HOME" -name "pdflatex" -type f 2>/dev/null || echo "pdflatex not found"
    exit 1
fi

echo "-----> Found TeX Live binaries at: $TEXLIVE_BIN_DIR"

# Set up PATH
export PATH="$TEXLIVE_BIN_DIR:$PATH"

# Test pdflatex
if ! "$TEXLIVE_BIN_DIR/pdflatex" --version >/dev/null 2>&1; then
    echo "ERROR: pdflatex test failed"
    exit 1
fi

echo "-----> pdflatex is working"

# Install essential packages for CV if tlmgr is available
if [ -x "$TEXLIVE_BIN_DIR/tlmgr" ]; then
    echo "-----> Installing essential CV packages"
    
    # Initialize tlmgr repository
    "$TEXLIVE_BIN_DIR/tlmgr" option repository ctan >/dev/null 2>&1 || true
    
    # Essential packages for CV generation (based on user requirements)
    # Core packages
    PACKAGES="geometry fontawesome5 tcolorbox enumitem xcolor hyperref pgf etoolbox amsfonts setspace mathpazo helvetic courier amssymb"
    
    # tcolorbox dependencies
    PACKAGES="$PACKAGES pdfcol verbatim environ trimspaces"
    
    # Additional useful packages for CV
    PACKAGES="$PACKAGES calc titlesec"
    
    for package in $PACKAGES; do
        echo "       Installing $package..."
        if "$TEXLIVE_BIN_DIR/tlmgr" install "$package" >/dev/null 2>&1; then
            echo "       ✓ $package installed"
        else
            echo "       ✗ $package failed (will try on-demand)"
        fi
    done

    # Read additional packages from latex-packages.txt if it exists
    EXTRA_PACKAGES=""
    if [ -f "$BUILD_DIR/latex-packages.txt" ]; then
        echo "       Found latex-packages.txt, reading additional packages..."
        EXTRA_PACKAGES=$(grep -v '^#' "$BUILD_DIR/latex-packages.txt" | grep -v '^$' | tr '\n' ' ')
        echo "       Additional packages: $EXTRA_PACKAGES"
        PACKAGES="$PACKAGES $EXTRA_PACKAGES"
    fi
else
    echo "-----> tlmgr not available, using base packages only"
fi

# Set up environment for runtime
cat > "$PROFILE_D" << EOF
export PATH="/app/.texlive/bin/x86_64-linux:\$PATH"
export TEXMFCACHE="/tmp/texmf-cache"
mkdir -p "\$TEXMFCACHE"
EOF

echo "-----> LaTeX installation complete"
echo "       Binary location: $TEXLIVE_BIN_DIR"

# Create test script
cat > "$BUILD_DIR/test-latex.sh" << 'EOF'
#!/bin/bash
echo "=== LaTeX Runtime Test ==="
echo "PATH: $PATH"
echo "pdflatex location: $(which pdflatex 2>/dev/null || echo 'NOT FOUND')"
echo "Direct path test: $(ls -la /app/.texlive/bin/x86_64-linux/pdflatex 2>/dev/null || echo 'FILE NOT FOUND')"

if command -v pdflatex >/dev/null 2>&1; then
    echo "Version: $(pdflatex --version 2>&1 | head -1)"
    
    # Test basic compilation
    cat > /tmp/test.tex << 'TESTDOC'
\documentclass{article}
\usepackage{geometry}
\begin{document}
Hello LaTeX from Runtime!
\end{document}
TESTDOC

    echo "Testing compilation..."
    if pdflatex -interaction=nonstopmode -output-directory=/tmp /tmp/test.tex >/dev/null 2>&1; then
        echo "✓ Compilation successful!"
        ls -la /tmp/test.pdf 2>/dev/null && echo "PDF created: $(wc -c < /tmp/test.pdf) bytes"
    else
        echo "✗ Compilation failed"
        echo "pdflatex error output:"
        pdflatex -interaction=nonstopmode -output-directory=/tmp /tmp/test.tex 2>&1 | tail -10
    fi
else
    echo "✗ pdflatex not found in PATH"
    echo "Available TeX binaries:"
    ls -la /app/.texlive/bin/x86_64-linux/ 2>/dev/null | head -10 || echo "TeX directory not found"
fi
EOF
chmod +x "$BUILD_DIR/test-latex.sh"

echo "-----> Test script created at /app/test-latex.sh"
